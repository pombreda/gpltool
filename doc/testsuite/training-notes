Notes/transcript for presentation

Slide 1: no notes

Slide 2: Welcome to this first course about using the Binary Analysis Tool. This course is
the first in a series of courses about analysing binaries with the Binary Analysis Tool

In this course you will learn about what the Binary Analysis Tool is and why it was made.
You will also learn about the backgrounds of how to identify compressed files and file
systems within a larger binary blob and how to extract these from the blob.

After that we will look into how the Binary Analysis Tool automates this and will make
your life a lot easier.

Slide 3: The Binary Analysis Tool, or BAT, is a generic framework for automating analysis of
binary files. It can be used for various purposes, like license compliance engineering,
or security research, or basically any problem for which you want to analyse a binary file.

The main focus of the Binary Analysis Tool is on license compliance engineering.

Slide 4: the Binary Analysis Tool was created with a few goals in mind. The first goal
is to demystify compliance engineering. To many people compliance engineering is a form of
black art, while to any properly trained engineer it is just another form of debugging.
With the Binary Analysis Tool it is easier to get up to speed with compliance engineering.

Very important is that results can be reproduced by someone else who is also running the
tool, without having to solely rely on someone's expert opinion that is hard to verify.

By making a common language for binary analysis it is easier to talk to other people
about analysing binaries, and accelerate research in this field.

But, one of the most important reasons was to take away excuses for companies that
insist that for them it is impossible to find out what they ship. By giving them a
tool that automates this task they can no longer use this excuse, but at the same
time are not left in the cold, because the tool is available to them as well.

Slide 5: BAT is released under the Apache 2 license. It is written in Python and is
a lightweight wrapper around standard and well-tested Linux tools, or standard tools with
some slight tweaks (available in a separate package). The heavy lifting is done by the
tools, while BAT takes care of all the infrastructure, such as setting up directories,
invoking tools with the proper parameters, cleaning up after tools, collecting results,
and so on.

In the past few years BAT has actively been used in academic research, of which results
have been put back into BAT.

One very important thing to remember is that BAT is just a tool that analyses binaries,
but it does not draw any legal conclusions. The results should always be interpreted
by a human.

Slide 6:

Slide 7: When looking at a binary file it looks rather overwhelming at first sight.
On this slide you see what a file looks like if you look at it with the tool 'hexdump'.
The first column displays the offset in the file (in hexadecimal notation), the second column
has the hexadecimal values of 16 bytes per row, and the third column displays the bytes as
human readable characters, if possible.

This slide actually displays the first few hundred bytes of a file in ZIP format. The first
bytes ('PK') are (part of) the identifier that is used for ZIP files.

Slide 8: A binary file, for example a firmware, looks like random data. But actually there
is a hidden structure, that is sometimes easy to find, and sometimes harder, or almost
impossible to find (for example if a firmware has been encrypted and you don't have any
decryption key). In most cases it is quite trivial, you just need to know what to look for.

To extract the contents of a firmware you first need to find file systems and compressed
files, then unpack them and for every file that has been extracted you need to do the same,
until you can't unpack anymore. After that you can start analysing each individual file that
you have unpacked.

Slide 9: Analysing a firmware that was downloaded from a website will not always tell you
everything on a device. Often firmware updates only update a part of the data that you can
find on the flash chip. Software like the bootloader, which often is GPL licensed software,
is not included in the firmware. If a device has a rescue partition it is often also left
untouched by a firmware update.

Sometimes a firmware update might be unusable because it is encrypted and you don't have
the right information to decrypt it. Or, you might not have a firmware to analyse in
the first place!

In these cases you will need to get access to the contents of the flash chip. The method
that's used the most is adding a serial port to the device and transferring the contents
of the flash chip. Other methods could be exploiting security bugs in the device, or, in
case of Android devices using the (remote) Android debugger. These topics are out of scope
for this course.

Slide 10: The firmwares that will be used in this course are all based on OpenWrt. We will
not be using firmwares of commercially available firmwares for a few reasons: we don't want
to single out companies and by distributing their firmwares we could possibly be infringing
the license terms ourselves. By using OpenWrt, for which we have complete sources, we avoid
both issues.

Slide 11: Before we can explain how the Binary Analysis Tool works you need to understand
the workflow that BAT implements, also because it makes it easier to debug ...
