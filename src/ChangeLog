2013-10-07
* store language in top level ranking result instead of hidden somewhere in
the results of the variables
* add COMPRESS_TMPDIR for writing temporary files for compress to ramdisk
* filter prerunscans based on noscan and magic
* rework Windows icon unpacking

2013-10-06
* pass unpacktempdir to leaf scans
* add supersimple Windows ICO verifier
* fix blacklisting for PNG
* add DEX_TMPDIR for writing temporary files for dedexer to ramdisk
* various list -> set changes

2013-10-05
* replace pychart with reportlab for generating version charts.
* better JPEG tagger

2013-09-30
* introduce LZMA_TMPDIR that can be set to for example a ramdisk to speed up
LZMA unpacking significantly.

2013-09-29
* fix permission issue for directories in tar unpacking
* recognise and tag sqlite3 databases

2013-09-27
* rework internal format for storing results. Especially if different versions
vary very little (like versions of stable Linux kernel) quite a bit of space
can be saved.

2013-09-26
* better filter for LZMA unpacking, based on some information from various
implementations, default settings, plus firmwares found in the wild.
* rework MP4 verifier
* start work on Android resources verifier
* fix unlinking in deserialized Java unpacker causing false positives

2013-09-25
* licenseversion.py: grab function names in parallel
* licenseversion.py: grab license information in chunks
* ignore ELF files in GIF unpacking, yaffs2 unpacking and jffs2 unpacking
* change data structures in ranking.py: lists -> set, also replace list
concatenation with append()
* prevent some string concatenation in generatereports.py
* remove unused code in ranking.py and prerun.py
* deduplicate return offsets in prerun.py

2013-09-24
* fix ignore list of jffs2 and yaffs2 in bruteforce-config
* don't pass 'scans' around needlessly in bruteforcescan.py: arguments passed
to subprocesses are pickled first and this data does not change.
* extract pickles in parallel again in generateimages.py

2013-09-23
* check beforehand whether or not a result needs to be pruned.
* licenseversion.py: don't convert sets back to lists in prune(). Also replace
this in several other files. It can save quite some time as detailed in the
comments of this post:
https://plus.google.com/115212051037621986145/posts/HajXHPGN752
* add verifier for OpenType font data, requires fonttools

2013-09-22
* don't copy reports and images to a temporary location if 'cleanup' is set
but directly write them to the final destination.
* verify and tag ODEX files

2013-09-21
* licenseversion.py: skip equivalent versions (same identifiers) in pruning
* licenseversion.py: shorter loops in pruning by removing unneeded data earlier
* generatereports.py: write results of unique result snippets to disk directly
without keeping them in memory

2013-09-20
* licenseversion.py: replace processing files in parallel with processing
results per file in parallel. In case of one or a few large result files (like
the Linux kernel) this is much more efficient.
* don't write results back to disk that don't need to be written back to disk
because they have not been changed.
* licenseversion.py: rework pruning (select fewer values)

2013-09-19
* replace Pool.map() with a few queues for unpacking to have better
interleaving of scans for unpacking.

2013-09-18
* pass unpacktempdir to aggregate scans so temporary files are packed in the
right location
* finish option to ignore files with certain extensions

2013-09-17
* easier notation for marking node types in findlibs.py.
* add some sanity checks for LZMA: after the magic header not all bytes are
allowed, so filter out the ones that are not used in practice. For some files
(like in the ASUS Padfone 2 firmware) this means a big reduction in time spent
scanning.

2013-09-16
* clean up more code of ranking.py, remove all traces of using main database
from it.
* add new 'extensionsignore' option for unpack scans and leaf scans for
ignoring files with a certain extension. This is useful for for example
application specific files that trigger many LZMA unpacking false positives.
* ELF: store possible plugins, extract RPATH, ignore a few very generic
symbols that would lead to false positives, like __divdi3 and friends.

2013-09-15
* remove on the fly caching code from ranking.py. It was not well maintained,
made other code a lot harder to read, was very time intensive to test and also
made the code a bit slower.
* rewrite ranking.py so only caching databases should be needed, still needs a
few cleanups and new checks.

2013-09-13
* only use jcf-dump once instead of twice. This saves launching an extra Java
process per .class file.

2013-09-12
* propagate setting of 'processors' to aggregate scans.

2013-09-11
* remove packages that can never contribute to a score (and that will never be
selected anyway) from the input in ranking.py
* clean up data that will never be selected. This speeds up string assignment
a lot.

2013-09-10
* remove unnecessary database lookups in ranking.py but only if rankingfull
is set

2013-09-09
* move all license code from ranking.py to licenseversion.py

2013-09-08
* move checking of versions of function names (C only right now) to
licenseversion.py

2013-09-06
* prune results of function names as well.

2013-09-05
* prevent reading result pickles twice in generatereports
* prune versions in results, after determining all possible versions. In most
cases this will not save any space or computing time, but in cases where there
are a ton of hits, plus many versions in the database (like the Linux kernel)
it can have a big impact on the size of the result pickles, plus reporting.

2013-09-04
* remove version checking code from ranking.py and move it to a separate
aggregate function. The reason is that with the version information the
pickles can get really large (example: Linux kernel). The pickles are read by
some aggregate scans, but they only need a bit of information. By moving the
version determination to a later point reading a large pickle from disk (even
when the information is not needed) can be avoided. Pruning of results will be
integrated in version checking as to further reduce the size of pickles.

2013-09-03
* fix kernel symbols extraction from binaries for more cases. Possibly it
would still not run correctly in a few cases, but better than it was.
* first check for Linux kernel function names before checking for strings in
any package. This lead to false positives if a string extracted from a kernel
image (representing a function) was also present as a string constant in
another package except the kernel.
* extract more kernel symbols from Linux kernel sources.

2013-09-02
* fix JFFS2 symlinks (as far as possible and reasonable)
* detect timezone files (not extensive) and ignore them in ranking scan
* detect and tag WOFF font files
* add optional parameter to packagerename.py for helping regenerate caches
without having to regenerate the entire cache

2013-09-01
* fix in report generation in case filename does not have a path component
* don't report and display false ranking results
* start on fixing symlinks for JFFS2 (if possible)

2013-08-29
* correctly clean up for false cramfs match

2013-08-22
* continue reworking extractkernelconfig.py

2013-08-21
* start reworking extractkernelconfig.py to extract more kernel configuration
directives

2013-07-07
* bump Ninka version

2013-07-05
* fix GUI help text

2013-07-04
* display result of distribution check in table format, not a list
* add links to pretty printed source code for function name reports
* don't store variable names with function names. This reduces the amount of
false positives.
* remove false positives from ranking

2013-07-03
* let unpack return an array 'hints'. This will contain a list of which scans
to try next. The use case is that certain firmwares and binary formats, such
as uImage, FIT and HDR, will in practice only contain certain file systems and
compression formats. By giving hints scans can be reordered and reprioritised
on the fly.

2013-07-02
* add another lzma marker
* add optmagic
* add jffs2 big endian marker
* start reworking EXE scanning
* add unpacking support for big endian jffs2

2013-06-28
* extract and store more information from Linux kernel modules

2013-06-27
* extract information from module_param and module_param_named
* allow maximum number of processors that can be used to be set. Needs some
more sanity checks.

2013-06-24
* start on making reports for function names that are more useful than just a
list of function names. This still needs a lot of work, similar to the unique
matches for string matches.

2013-06-23
* pass 'debug' to individual scans (except for pretty printers)
* add reports with distribution checks to reports. This still needs some more
work to make it look good.

2013-06-22
* add check for matching consistency of architecture and versions of Linux
kernel modules
* make main report in GUI easier to navigate, plus reorder results a bit
(string matches first, then function matches)
* start reworking file2package

2013-06-20
* add more function names to the list of standard interfaces

2013-06-19
* display dynamic ELF pictures in GUI
* tag Linux kernel and (some) kernel modules in the GUI

2013-06-17
* actually commit script to compare two unpacked binaries/firmwares for
differences
* add program to compare a source code archive based on results generated with
BAT

2013-06-13
* filter out new format (Linux kernel 3.6 and later) for KERN_ERR and friends
in ranking.py.
* filter function names from the kernel (not reported yet)
* add script to compare two unpacked binaries/firmwares for differences

2013-06-11
* rename xmloutput to ppoutput. Allow for separate modules for storing per
scans pretty printers, so people wanting to have custom pretty printers do not
have to overwrite the existing modules, but can use a parallel set of pretty
printers instead.

2013-06-10
* extract functions from the Linux kernel, and also extract more strings that
can be found in __ATTR and friends: xgettext won't catch them, so some regular
expression magic is needed.

2013-06-08
* split lookup of kernel symbols, lookup symbols for kernels that are not in
ELF format
* store function names from the Linux kernel as 'kernelfunction'

2013-06-07
* fixes for ELF scanning: I have bumped into situations where corrupt ELF
files (valid header, but files incomplete, for example after broken squashfs
unpacking) would make ELF scanning fail.
* finish RZIP unpacking
* add extra sanity check for broadcom variant of squashfs to properly
determine blacklist (or at least more reliably)
* reorder priorities so squashfs unpacking is run before gzip unpacking
(preventing gzip of unpacking gziped files inside inodes, which sometimes can
happen with the broadcom variant of squashfs, like for example used in the
ASUS RT-N66U)
* fix ZIP blacklisting
* disable mergeBlacklist for now since it is not reliable
* fix extraction of BusyBox version number
* check whether tags returned by unpack scans are in 'noscans' of subsequent
unpack scans. If so, continue on to the next scan.
* add patches for CVE-2012-4024 and CVE-2012-4025 for squashfs4.2
* pass tags around better for leaf scans
* increase fidelity for Linux kernel scanning by locating kernel symbols in
the kernel image (if not ELF) and don't treat them as normal strings to reduce
false positives.

2013-06-06
* use cloning database for Java method names, field names and class names
* add stubs for RZIP unpacking

2013-06-04
* add missing file checksum back to report

2013-05-31
* fix database sanity check

2013-05-19
* add script to walk source tree and compare all source files to database.
This is for my talk @ LinuxCon Japan 2013

2013-05-16
* add 'empty' tag for empty files

2013-05-14
* report duplicate files for top level file

2013-05-11
* tag and release BAT 14

2013-05-10
* move almost all setup code in ranking.py to separate method
* fix cramfs unpacking so it is correctly carved out from files.

2013-05-07
* add hook to run setup code for programscans. Still needs work.

2013-05-05
* fix unpacking inefficiency in generatelistrpm.py

2013-05-03
* add tons of more functions and variables that are part of various standards,
like LSB, or which are common system calls, or for some reason are in glibc or
uClibc (not complete yet)
* generate linking pictures in parallel

2013-05-02
* correctly resolve WEAK symbols in findlibs.py, add numbers to edges
indicating number of used symbols, make some edges dotted if all used symbols
are part of POSIX

2013-04-29
* work around squashfs unpacking crashes in some variants if 7zip compression
is used instead of lzma or zlib

2013-04-28
* add yet another variant of squashfs+lzma (for newer Broadcom devices) to
bat-extratools

2013-04-27
* add another variant of squashfs+lzma to bat-extratools

2013-04-26
* rename generate-version-chart.py, add extra parameter
* add more information to variable names report. This should actually have a
graphical representation
* replace bat-unyaffs with Python reimplementation

2013-04-24
* tag symbolic links, so there is no need to rely on the 'magic' attribute
anymore.
* remove use of 'magic' attribute as much as possible from the code
* search for kernel variables and print in a report. Needs more work.

2013-04-23
* add reimplementation for unyaffs which should not segfault, like the current
one sometimes does.

2013-04-19
* add tag 'linuxkernel' if an ELF file has a certain section only used for the
Linux kernel

2013-04-18
* update Ubuntu + Debian configuration
* tagging 13.0

2013-04-16
* make sure PNG check does not barf on broken PNG files
* fix unpacking of romfs
* fix filter in GUI

2013-04-15
* handle blacklists in ELF files differently. This is for Linux kernels that
are distributed as ELF files and have parts of the file blacklisted (initrd).
By extracting sections and checking if only the sections are blacklisted the
check can be more fine grained.

2013-04-10
* fix return value for forges

2013-04-02
* create index for origin in processed

2013-04-01
* fix error in batchextractprogramstrings in variable name extraction.
* remove temporary directories that might have already been extracted by
cabextract

2013-03-27
* better handle newlines in output of pdfinfo

2013-03-17
* expand picture generation in findlibs.py, does not yet take WEAK symbols
into account
* prevent infinite looping in Broadcom variant of unsquashfs
* change default parameters for bat-romfsck
* fix error in gzip unpacking: too much stuff was blacklisted if offset != 0
* rewrite genericSearch so it only searches a file once for license and forge
scanning
* add per scanning phase debugging, still needs documentation

2013-03-16
* store kernel symbols (exported with EXPORT_SYMBOL*) as 'kernelsymbol'
instead of 'variable'
* update dedexer to 1.26 since it can handle ODEX files better
* add support for supplying list of rewrites to batchextractprogramstrings.py
* enable new Atheros version of unsquashfs
* prevent infinite looping in unpacking squashfs file systems for Atheros 2
variant and OpenWrt variant. Other variants need fixes as well.

2013-03-15
* fix error in batchextractprogramstrings.py: wrong type was stored for
variables extracted from the Linux kernel
* add undeclared but used dependencies to graph pictures in findlibs.py.
Change colour of edges.

2013-03-14
* fix ZIP unpacking error
* better handle unsquashfs errors. There are some squashfs file systems where
file systems from Broadcom seem to be unpacked successfully by normal
unsquashfs versions and other versions of squashfs, but where unpacking
actually fails with gzip errors. By treating these as errors the script will
fall through to the broadcom unpacker which (hopefully) will be successful.
* generate separate ELF report (needs actually to be moved to findlibs.py) and
display in the GUI
* add squashfs variant for Atheros. This variant is not yet enabled, but needs
more testing first to determine the right order where to place it (before the
other Atheros unsquashfs for sure)

2013-03-13
* fix reports
* partially parallelise findlibs.py
* generate pictures in findlibs.py
* fix GUI so at least some information about empty files/symlinks/etc. is shown

2013-03-12
* kernel modules might store strings in different sections than .rodata, like
.rodata.str1.8 and .rodata.str1.1. Also read these sections
* generate reports for display in the GUI. Adapt GUI to read these files.

2013-03-11
* better handle archives with the same version number but different contents in
batchextractprogramstrings.py
* don't (re)write JAR files if nothing has been aggregated
* pass tags to programscans
* fix busyboxversion.py, standalone invocation was broken
* simplify setting temporary dir option
* check if a statically linked ELF file happens to be a Linux kernel. If so,
ignore the blacklist and tag it as a Linux kernel.
* rewrite scanned strings for Linux kernels: chop off generated code like <c>,
<d> and <\d+> for debug messages that appear through the code in the kernel.
This increases fidelity for the Linux kernel a lot.

2013-03-10
* move topleveldir creation to bat/bruteforcescan.py
* add new option tmpdir to set path of temporary file creation

2013-03-09
* extract values of EXPORT_SYMBOL* from Linux kernel source and store them.
These can later be used by ranking.py if there is a kernel image packed as an
ELF executable.
* start on extra sanity checks for batchextractprogramstrings.py to better
deal with duplicate versions which might or might not actually be duplicates.

2013-03-06
* check whether or not input for generating version charts is an empty list.
* update dedexer to 1.25 to have better support for ODEX

2013-03-05
* determine whether or not a ZIP file has a comment field.
* fixes for pretty printer: ignore unpackreports that have been removed, like
class files in the Java aggregator
* fix return type for findlibs.py
* crude fix for ZIP comment fields. Needs proper fix later, but hey, seems to
work so far
* ignore synthetic methods in Java class files

2013-03-04
* assign results of aggregate scans (if any) to the top level element.
* merge remaining part of generateuniquehtml.py into generatereports.py,
remove generateuniquehtml.py
* add support for pack200, not enabled by default, since I first need to
figure out how to easily add a dependency on openjdk without version names.

2013-03-03
* deduplicate data for unique matches stored in results for JAR files. In some
cases this is a HUGE save (96% in size in some of my test cases).
* deduplicate data for unmatched strings stored in results for JAR files.
* generate unique string matches html report files in aggregate scan after
deduplication

2013-03-02
* extract pickles for generating images in parallel
* add storedir and other configuration directives to aggregate scans
* remove rankimages.py from configuration
* create workaround for weird ZIP files
* add aggregate scan for finding duplicate files. Reporting still needs to be
added.
* add more license markers

2013-03-01
* check whether or not file to be scanned actually exists
* add tags for gzip compressed files
* generate piecharts in parallel
* start on extracting pickles in parallel
* start on deduplication of report generation

2013-02-24
* don't scan identical JAR files in aggregatejars.py in parallel: it could
lead to race conditions when writing the result file, plus also costs more
time scanning.
* add code to optionally remove results of .class files after aggregating JAR
results. This saves time generating pictures for individual class files, which
might not be very interesting.

2013-02-23
* add identifier for UPX

2013-02-21
* let aggregatescans check unpackreports instead of leafreports for tags in
sanity checks
* add priority for aggregatescans
* parallellise aggregatejars.py
* start on deduplicating generating images

2013-02-20
* use clearer variable names in generateuniquehtml.py
* don't dump configuration as part of scandata.pickle, but copy the original
configuration file into the result archive
* fix blacklisting for CPIO
* update busybox scanning to also support 1.21
* use cloning database for C variable names
* fix blacklisting for ranking, busybox and individual checks

2013-02-19
* remove dependency on PyXML
* add caching database in ranking.py for C variable names
* prevent empty directories being created by ext2 scan
* start on deduplicating 'reports' from ranking scan: there is a ton of
repetition in them, which takes up a lot of space in the on disk pickles,
especially for large packages like the Linux kernel

2013-02-18
* prevent adding duplicates to report tarball
* merge generatenameshtml.py and generateuniquehtml.py
* fix sorting of scans
* add some tags from leafscans to unpackreports
* ignore files which don't have ranking results in generateuniquehtml.py and
rankimages.py

2013-02-17
* ignore statically linked files in findlibs.py

2013-02-16
* determine size for gzip files, preventing false positives and scanning time
* fix aggregate jars: use right index, prevent unnecessary storing of a ton of
data
* start moving 'tags' to unpackreports instead of the leafreports. This will
require some tweaks to how the leafscans are run as well.

2013-02-15
* optimize RPM unpacking: use size from RPM header
* don't read file in its entirety into memory in ranking, but use seek() and
read() instead
* remove dependency on fssearch in RPM unpacking
* remove unused method in kernelanalysis.py

2013-02-14
* use caching databases for Java fields and class names. This saves a ton of
time (especially fields)
* copy results more efficiently, which was a problem when there were lots of
result files

2013-02-13
* prevent some scans for running on ELF files
* remove false positives from LRZIP unpacking

2013-02-12
* fix ELF tagging in prerun.py. This prevents LZMA unpacking from being called
needlessly.
* write results of leafscans to disk earlier and don't keep them in memory
until the very late end. Rewrite everything (except the GUI) that uses the old
notation. This saves a significant chunk of memory (90% in some of my test
cases) which makes it less likely swap is used, which just kills performance.

2013-02-10
* don't store unneeded data in scans that don't need it

2013-02-07
* merge caching databases, decluttering configuration a bit
* add conversion script to merge databases

2013-02-06
* if available use precomputed scores

2013-02-05
* store variable names more efficiently

2013-02-04
* cleanup for LRZIP unpacking
* more sanity checks for ext2/3/4 unpacking

2013-01-27
* fixes for patterns in bat-code2html. There are many more variants out there
than the original authors ever encountered.

2013-01-26
* add reimplementation of romfsck.c (which segfaulted), done in Python, with
more sanity checks.

2013-01-21
* add configuration checker batconfigcheck.py to check validity of
configuration files

2013-01-20
* update documentation for BAT 12
* return more information in JAR file aggregator

2013-01-19
* expand function name reporting and display in the GUI
* move sanity checks from various methods in ranking.py to top level methods,
plus document the sanity checks.
* check whether or not old format databases were used
* load cloning database in memory to prevent accessing the cloning database
many times.

2013-01-18
* remove more duplicate code from ranking.py
* merge some reporting modules
* add very basic reporting for function names

2013-01-17
* add more sanity checks in fwunpack.py, unpackrpm.py and ranking.py
* add cleanup for postrunscans. This is to help prevent scans from leaving
results that could possibly be packed into the result archive during a later
scan.
* create version charts for function names (not used in the version yet)
* sort versions with the same amount of hits in version charts for strings
* remove unused option from bruteforce.py
* remove duplicate code from ranking.py
* shrink size of top level pickle file
* fix rewriting of leafreports now that they are first copied with deepcopy()

2013-01-12
* merge reports of individual class files in Java aggregate scan

2013-01-11
* add extra sanity check for romfs unpacking. romfsck sometimes segfaults if
the romfs is not valid. By doing a few header checks in advance we can avoid
these.
* return data from ELF aggregate scan
* display data from ELF aggregate scan
* guess a size for Atheros LZMA squashfs variant using -s option for
bat-unqsuashfs-atheros. This prevents individual inodes from being unpacked
using LZMA or other methods, reducing false positives.
* switch order in which ralink and atheros variant of squashfs are run
* return results in correct format for byteswap method
* change priority for XOR 'decryption'. The scan is still not enabled by
default due to likely scan recursion.
* 7z unpacking might only partially succeed, leaving files in the directory so
they need to be removed.
* expand Java aggregate scanning.

2013-01-10
* fix JFFS2 unpacking which would fail if we would somewhere find just a
single inode outside of a JFFS2 file system
* if we hardlinked files, then modified them, we ended up modifying the
original copy of a file too. Introduce a flag 'modify' that can be used to
signal that the file should be copied instead. Apply this fix to batxor.py.
* expand ELF checks in prerun.py
* expand dynamic libs scanning: guess libraries from sonames, extract and
compare variables

2013-01-09
* start on verifying whether or not combinations of libraries and executables
in an archive (like a firmware) will work, by resolving symbols extracted from
dynamic sections of ELF files.

2013-01-08
* extract extra information from Java and C binaries
* display extra information from Java and C binaries in GUI

2013-01-07
* extract and report function names for Java class files and Dalvik dex files.
* write reports as gzip compressed tar instead of uncompressed tar
* squash licenses: if Ninka and FOSSology agree we have a lot stronger
evidence and so this should be reported.
* report Ninka and FOSSology licenses separately in the GUI
* record unmatched strings for later reporting
* don't complain about missing configuration in the GUI when navigating
'string matches', only when 'unique://' links are clicked and the
configuration was not loaded.
* display unmatched strings in the GUI

2013-01-06
* add a workaround for ranking if we have packages A and B (or more) where A
is contained in B but we're actually looking at the smaller package A and not
at the larger package B. If we have no unique hits at all, we will report A,
instead of B.
* rename BAT_FUNCTIONNAME_CACHE, to BAT_FUNCTIONNAMECACHE_C, since we want to
scan for method names for Java too
* add some more data to clonedbinit.py

2013-01-05
* tag statically linked elf files and display them in the gui
* tag version 11.0
* add more examples to clonedbinit.py

2013-01-04
* rename more databases in ranking.py
* licenses database now needs to be specified separately

2013-01-03
* give extra hints to squashfs unpacking, so it is possible to do better
filtering.
* don't overwrite picklefile if it already exists. This was causing display
issues in the GUI, since some information would be lost.
* add strings of renamed packages together to increase accurace in ranking.
Uses a new configuration BAT_CLONE_DB

2013-01-02
* fix loop packing results in ranking.py that potentially has a big
performance impact

2012-12-30
* change name of some databases in ranking code: remove "SQLITE_" to make
things a bit less verbose.

2012-12-29
* change default setting for multiprocessing to 'yes'

2012-12-27
* BAT 10.0 released

2012-12-16
* batchextractprogramstrings.py: distribute tasks over available workers
differently to make it less likely that one worker gets all the big tasks.

2012-12-15
* bat/fwunpack.py: let unpackFile handle lengths properly, only when offset ==
0. Only used in ZIP unpacking at the moment.
* fix ZIP unpacking in case there is a single ZIP file, with trailing data.
* add script to regenerate LIST from a database. This is convenient in case
the analysis needs to be rerun (due to errors in scanning, crashed harddisk,
etc.)
* change parameters for verifylist.py
* extract a lot more info in batchextractprogramstrings.py

2012-12-14
* support 'temporary' files in bruteforcescan.py. This is needed for XOR
'decryption'.
* add a preliminary implementation of XOR 'decryption'. There is a risk of
getting into an endless loop, so the scan is disabled by default.
* deduplicate postrunscans

2012-12-10
* add another variant of squashfs where only the identifier was changed. Code
is a bit inefficient and could use some cleanups.

2012-12-08
* add variant of generatelist.py that reads a directory full of SRPMs,
extracts the source code from the SRPMs, copies them to a directory and
generates a LIST file for the extracted sources.

2012-12-07
* split database into three databases (because of space contraints):
  - master database
  - licenses/copyrights database
  - ninkacomments database
In BAT 11.0 this will become the standard layout used by ranking.


2012-12-05
* sanity checks in batchextractprogramstrings.py to make sure there are
warnings if license/copyright scanning is enabled, but FOSSology does not
work (because PostgreSQL has not been started).
* remove unnecessary column from ninkacomments database, fix spello in name of
index

2012-11-30
* rewrite fossology scan for nomos to scan more files at once. Chunks of 10
seem to work best according to some very unscientific testing.

2012-11-29
* add script to verify format of LIST files as generated by generatelist.py.
This is useful if these files were manually edited for correctness.

2012-11-28
* extra sanity check for existence of database table in bat/ranking.py
* update database creation to work with FOSSology 2.1.0.
* extract copyrights (currently only e-mail addresses and URLs) using the
copyright agent from FOSSology.
* store other copyright statements. There is quite a bit of bogus data in
there, so we probably need an extra step to clean up.

2012-11-26
* remove non-functioning code from bat/images.py and replace it with
configuration options
* remove unused code from bat/bruteforcescan.py
* remove unused code from bat/fwunpack.py
* start on verifier for PE executables

2012-11-25
* rename bat/bruteforce.py to bat/bruteforcescan.py to avoid nameclashes.
Actually bruteforce.py should be renamed as well.

2012-11-22
* fix error in bat/bruteforce.py: actually use the checksum instead of the
size, which could have lead to misclassifications
* add configuration option 'outputlite' to make smaller archives (without a
dump of all data)
* add simple verifier to tag Java JAR files (incomplete and needs more sanity
checks)
* add extra sanity check for yaffs2 unpacking

2012-11-21
* fix errors in database creation script, add preliminary blacklisting
capabilities.

2012-11-16
* rewrite leafscans to return a dictionary instead of a list of dictionaries

2012-11-13
* support "noscan" and "scanonly" for postrunscans, for as far as applicable

2012-11-12
* fix config initialization bug in batgui
* add extra sanity checks in XZ unpacking based on 'streamflags'
* significantly rework XZ unpacking to make it more sane
* introduce 'scanonly' to filter out scans. This is complementary to 'noscan'

2012-11-11
* allow multiple values in 'storetype'
* display licensing information in GUI
* XZ unpacking cleanups
* condense filenames in generateuniquehtml.py for easier display in GUI
* assume .txx files are C files

2012-11-10
* stop processing XZ files as soon as all possible XZ files have been extracted.
* put extracted XZ files in blacklist
* use xz -l instead of xz -t for faster testing.

2012-11-04
* also store line numbers for function names

2012-10-31
* introduce new configuration parameters for postrunscans to store results in
a more generic way. Rewrite data dumping routine to take advantage of this.

2012-10-30
* parallellise more in database creation script
* add some more granularity to scanning in parallel

2012-10-17
* parallellise more in database creation script

2012-10-14
* fix multiprocessing code in database creation
* add script to mass rename packages in the database

2012-10-13
* make better use of multiprocessing in database creation

2012-10-12
* split creation of images into a generic part and a part for ranking
* add simple script to verify integrity of database

2012-10-03
* clear old results when opening new results file
* release BAT 9.0

2012-09-24
* add extra sanity check to prevent ext2 unpacking from barfing after
identifying non-ext2 images as ext2

2012-06-27
* fixes to allow batgui to run on Linux systems that don't have BAT installed

2012-06-25
* add missing dependencies to RPM file

2012-05-31
* add warning if htmldir is not set

2012-05-24
* fix ranking method for corrupted ELF files. It is not as accurate as the
usual methods we use for ELF, but better than nothing...

2012-05-23
* fix in GUI for fifo files

2012-05-22
* add 'debug' statement for helping debugging
* make location of HTML files for viewer more configurable. This needs more
work.
* htmldir can now be set on the fly by loading a new configuration
* tag and release 8.0

2012-05-21
* extra sanity checks for BAT_REPORTDIR
* add wrapper code for scanning Minix v1 file systems
* add configuration for scanning Minix v1 file systems
* pass blacklists to forges and licenses checks

2012-05-20
* add first version of minix unpacker to bat-extratools

2012-05-15
* files can have multiple symbols in the file tree, so make it easier to add
more symbols and decorate the file tree
* sort file tree
* decorate Android files in file tree
* big file fixes (finally!) for cramfs and cab unpacking

2012-05-14
* split data dump method, so it can be reused in the GUI more easily
* save data from scan in GUI
* rename "ranking" dir to "filereports", since it is far more accurate
* keep focus on selected file after applying filters
* keep data in tabs if selected file has not changed. Especially if there are
lots of matches, or large files in advanced mode this will save unnecessary
waiting.
* gzip unique html reports to decrease unpacking time in GUI + update GUI
* select scans from GUI

2012-05-13
* load scan configuration via the menu too
* display tags in GUI
* portability fixes, add stubs for scanning directly from interface
* launch scans via interface and display results in interface. Still to be
added: saving results, plus better filtering of scans

2012-05-12
* don't show scanning menu for non-Linux systems

2012-05-11
* cut more data from scandata.pickle that is not used in the GUI
* add very conservative tagger for GIF files
* add filter to hide (seemingly) empty directories
* portability fixes in batgui
* add list of scans from configuration file (if specified) to checkbox menu

2012-05-10
* move bruteforce scanning functionality to separate file in 'bat'
subdirectory. This will make it a lot easier to make other front ends for BAT,
for example GUI or networked service. Rework top level bruteforce.py to
reflect change.
* move some functionality that is likely not to be used much in GUI to
"advanced mode".
* unpack files that are only needed in advanced mode on the fly instead of
always. This significantly reduces waiting time when opening an archive for
viewing in "simple" mode
* enable "advanced mode" in GUI
* add more filters (resources, PDFs) to GUI

2012-05-09
* write original ranking dump data to separate pickle files. This data is
not used in the GUI directly and is just wasting memory and CPU time.
* adapt GUI to reflect change in dump data format. Also don't unpack
'ranking' directory with new pickle files: they are not used and unpacking
takes time.
* construct file tree from scandata.pickle instead of walking the data
directory from the dump
* enable interactive filtering of file types via menu

2012-05-08
* add filtering capabilities to GUI

2012-05-07
* fix edge case in Java deserialisation
* add function name match reporting to GUI

2012-05-06
* enable function name scanning in ranking method
* fix and enable gzip verifier in prerun.py

2012-05-04
* introduce LZMA_MINIMUM_SIZE parameter to set minimum size of results of for
LZMA unpacking. This is to reduce false positives.
* add simplistic verifier for ELF files. This is to reduce false positives in
LZMA scanning.

2012-05-03
* rework bruteforce.py so it is easier to make different frontends
* introduce "enable" configuration directive. This will make it easier for a
graphical frontend to enable/disable checks

2012-05-02
* add very simplistic verifier for MP4 files to reduce false positives
further. Only works on a subset of files for now
* add first version of a graphical viewer of results made with BAT
* add stubs for extra method for scanning dynamically linked binaries, by
searching for function names. Prepare rest of the code for the change.

2012-04-24
* tagging 7.0

2012-04-18
* set a maximum size for picture generation: if file is bigger than a certain
size no picture ("tv static") will be generated.
* outcomment code for generating thumbnails for now
* set a maximum size for hexdump generation: if file is bigger than a certain
size no hexdump will be generated.

2012-04-17
* replace glob.glob() with our own filtering. This prevents os.listdir() from
being called numerous times
* very simplistic check for tagging Ogg files, needs vorbis-tools.

2012-03-29
* add a very simplistic method to tag binary XML for Android (file name check,
plus the first four bytes)

2012-03-26
* add tool to check whether or not a binary + libraries can be combined at
runtime
* replace piechart generation using external script and pychart with
matplotlib. It's faster, doesn't require an external script and better fits
the license.

2012-03-24
* remove unused and no longer maintained file

2012-03-21
* pass size hints, if available

2012-03-19
* also pass top level scan directory to postrunscans

2012-03-18
* add code to determineinformation about correlation between packages for
non-unique matches.

2012-03-11
* move the unpacking to a directory called 'data'. Dump the state of the
program in a pickle so it can be read back for later use.
* remove hardcoded paths from the data that is pickled. This makes it easier
to relocate the results for future processing.

2012-03-08
* add script that uses hexdump -Cv to generate files to be used in a GUI. It's
faster than writing our own.

2012-03-01
* revive knowledgebase idea, but now as a pretty printer

2012-02-28
* make pretty printer configurable

2012-02-27
* rework BusyBox configuration extraction: some things could be done a lot
easier and also give better results.
* add romfs unpacking using romfsck. Not enabled by default, since it needs
some more cleanups
* add romfsck to bat-extratools

2012-02-26
* work around standard behaviour in xgettext that caused strings to be not
extracted

2012-02-24
* split caching database per language family
* determine version based on strings extracted from the binary
* determine licenses based on strings extracted from the binary plus a large
database of licenses extracted from source code using Ninka

2012-02-23
* start moving maintenance scripts into the 'maintenance' directory
* add code to generate images of files

2012-02-22
* add plugin that queries a database with packages extracted from sources from
distributions

2012-02-21
* several cleanups, remove unnecessary calls and conversions

2012-02-19
* correctly process scans that don't define "noscan"
* introduce environment variable to indicate whether or not there is a fully
generated caching database
* inline some code in ranking.py, reducing memory consumption

2012-02-18
* pass environment variables to XML pretty printing methods

2012-02-15
* remove use of dynamic symbols in ranking.py, to decrease false positives

2012-01-30
* add uncompression of compress'd files
* tagging 6.0

2012-01-23
* avoid duplicate license scanning

2012-01-22
* actually make a copy of the environment, to prevent "Argument list too long"
errors

2012-01-20
* determine the size of JFFS2 file systems
* remove limit of JFFS2 scanning (whole file). JFFS2 file systems can now also
be carved from the middle of a file.
* return order in which identifiers are found. This is not yet used.

2012-01-19
* big file fixes for byteswapping
* rework identifiers for .exe files
* big file fixes for PDF files

2012-01-16
* add lrzip unpacking
* enable cramfs checking by default
* add another squashfs variant (from DD-WRT)

2012-01-14
* prepare for 6.0 release
* fix bugs in RPM unpacking

2012-01-13
* further preprocess strings that go into the database. Specifically we split
on strings that 'strings' will split on when reading a binary file
* remove control characters in escaped form at the start of a string
* make multiprocessing configurable in the configuration

2012-01-10
* don't run leaf scans on duplicate files. Instead run the scans just once and
recombine the results later.

2012-01-09
* don't unnecessarily run program scans and postrun scans if none are defined
in the configuration
* only pass the configuration of the program scans to the program scans. This
can save a lot of memory for big runs.

2012-01-04
* add infrastructure for postrun scans

2012-01-03
* parallellise unpacking. Hardcoded to 1 worker for now.
* big file improvements for lzip, lzo and 7z unpacking

2012-01-01
* change copyright statements
* extract strings from JavaScript files too
* sort scans for leafs first, so big files are scanned first
* send tasks to the pool in chunks of size 1, so each process in the worker
pool runs for roughly the same time.
* fix an error in the ranking code, which significantly speeds up the
algorithm...again
* tag bz2 and gzip files

2011-12-31
* parallellise leafscans. Especially when ranking is enabled this pays off a
lot and shaves off another 30% of runtime (even more if caches are hot). It
seems to be faster even when there is only one worker process in the pool. There
is one caveat: this will only work correctly if the caching database for the
ranking scan has been *FULLY* generated, or else it will try to write to the
database, which could lead to errors. The default process is therefore
hardcoded to 1, but this will be made configurable in the near future.

2011-12-28
* for some ext4 file systems tune2fs needs 8192 bytes to run correctly
2011-12-27
* unpack scans also can return tags

2011-12-25
* select scans based on the actual offsets that were found. Also make sure
that scans for which magic was found at offset 0 are tried first.

2011-12-24
* add a very simple verifyGraphics pre-run scan. Right now it only verifies if
a file is a JPEG file.
* always run the marker search program and no longer as an optional pre-run
scan. This also simplifies the other pre-run scans a bit.
* only run the marker searches for the magic types that are defined in the
configuration. This speeds up scanning a tiny bit.
* move code outside of loops in ranking scan, slashing runtime with an
additional 60%.

2011-12-23
* stubs for adding a 'noscan' directive that scans can use to say which
category of files they don't want to scan.
* move pre-run scans to separate file
* pre-run scans can return a list of tags. Right now it is just file type, but
they could be anything. The contents of the list of tags is compared to the
value of 'noscan' in the configuration file. If a tag can be found in the
'noscan' list, the scan is skipped. This way we have a fine grained model to
enable and disable scans for specific files.
* add prerun scan for verifying if a file consists of just printable text
characters

2011-12-22
* add extraction of PDFs

2011-12-21
* speedups in creation of temporary strings cache, which reduces runtime
vastly.
* enable new variant (realtek) of squashfs+lzma

2011-12-20
* avoid duplicated rows in the strings cache database for ranking. This can
save quite a bit of space.

2011-12-19
* for each file first determine it is a valid XML file, so other methods no
longer need to scan it. This is especially to prevent the ranking method from
scanning these files.
* add yet another squashfs+lzma variant to bat-extratools

2011-12-18
* rework extraction of ELF sections from ELF binaries. Just using 'strings'
got too many strings. The previous version of the extraction of the right
sections (using readelf -p) did not work, because readelf -p ate leading tabs
and converted them into spaces, so sometimes some strings were not matched
properly. Now we first cut the right ELF sections from the binary, then use
strings on the temporary binary, which gives much better results.

2011-12-17
* filter out scans we don't need to run anyway, removing the need to
dynamically load and eval() the code
* big file improvements for ICO scanning
* rework unpack scans: no longer return offsets, since only one of the prerun
scans scans for/alters those.
* ranking: if none of the strings we have for gains is significant enough we
should stop processing
* ranking: fix bug where only one result per string was fetched, which led to
vastly incorrect results.

2011-12-15
* big file improvements for squashfs, ARJ and ar
* simple scanner that looks for presence of strings that might indicate the
code was from a forge, like sourceforge or code.google.com. In the future it
might be good to use the scanner from FOSSology for this.
* very simplistic scanner for scanning for a few license identifiers. This is
*not* meant to obtain proof that a program is under GPL, just as an indicator
for further investigation.

2011-12-14
* big file improvements for lzma, serialized Java, RAR and ZIP
* replace using output of libmagic for determining device files, sockets, etc.
by using standard Python functionality
* big file improvements: use hardlinks instead of shutil.copy(). This will
give us some more improvements, since files don't need to be copied around.

2011-12-13
* stop unpacking a file when the whole file has been blacklisted
* remove duplicate code in bruteforce.py
* unpackGzip: don't read in a file and then write it out again if it is the
same data, but use shutil.copy() instead. Also write files out with dd instead
of reading the data ourselves. It is a lot more efficient. Finally don't read
the output of zcat, but write it to a file directly. This really pays off in
the case of big files.
* don't read in the file at once when determining the hash, because this will
be very resource intensive for large files.
* unpackTar: like unpackGzip: don't read a file, but use shutil.copy() and dd
instead. This pays off with big files.
* big file improvements for byteswap and iso9660 scanning, plus fix dd command
for gzip and tar
* big file improvements for ext2
* big file improvements for bzip2

2011-12-12
* add another squashfs+LZMA variant (for Atheros devices) to bat-extratools
* add unpacking for squashfs+LZMA variant for Atheros devices to squashfs
unpacking
* rework code for unpacking files that contain multiple zip files, almost done
* add workaround for certain files that contain multiple zip files. This
works for now, but it might be that we will need additional fixes in the
future.
* fix ranking bug that was triggered when there was a blacklist active
* fix unpacking code for unsquashfs (openwrt, lzma). When unqsuashfs tried to
unpack and tried to create inodes the scan thought unpacking had failed while
it was in fact successful.

2011-12-11
* if unyaffs seems successful, but actually does not unpack any data, it is
unsuccessful, so treat it as such.
* if zipinfo is unsuccessful we should bail out

2011-12-10
* add unpacking for 7z files, only when 7zip header can be found at offset 0,
until figured out what's safe (7z can unpack a lot more)

2011-12-08
* rework unpacking for GIF
* don't always create a temporary directory for 'byteswap', only when
necessary
* rewrite cramfs unpacking to new style
* don't try to unpack encrypted ZIP files

2011-12-07
* add unpacking for executables packed with UPX
* rewrite tar unpacking to standard format
* add extraction of PDF meta information using pdfinfo

2011-12-06
* enable yaffs2 unpacking

2011-12-05
* remove unused database

2011-12-01
* don't follow symlinks for chmod
* unsquashfs from openwrt with lzma cannot unpack to an existing directory, so
use an extra directory to work around that limitation
* add alternative LZMA identifier that is sometimes used in OpenWrt, rework
LZMA unpacking to work with multiple identifiers

2011-11-25
* add jdeserialize to bat-extratools
* add unpacking for Java serialized files using jdeserialize

2011-11-01
* treat Groovy files as Java
* treat JSP files as Java

2011-10-30
* add dedexer to bat-extratools

2011-10-21
* add field 'envvars' to pass around extra information to scans. These should
be put into the environment in some cases (ranking scan)

2011-10-20
* add string constant extraction for Dalvik files, using dedexer. This needs
to be added to bat-extratools

2011-10-19
* add string constant extraction for Java class files, so we can do better
matching in the ranking code for Java.

2011-10-18
* release version 5.0
* release first version of bat-extratools, keep it in sync version wise with
BAT

2011-10-17
* RPM specfile fixes
* enable squashfs variants, plus fix bug in Squashfs LZMA (Broadcom variant)
* add Squashfs LZMA (slax.org/Ralink variant)
* add Debian package installation files for bat-extratools

2011-09-25
* add more documentation to the user guide

2011-09-24
* update version of Ninka that's used, also scan with FOSSology by default.
* scan .qml files and treat them as C

2011-09-23
* add unpack ZIP files to batchextractprogramstrings.py

2011-09-22
* add more sections to the user guide

2011-09-21
* started work on incorporating snippets of documentation into a comprehensive
user guide, giving it a much needed quality boost as well.

2011-09-20
* finished SWF unpacking. Right now it is assumed that the entire file is a
flash file and it's compressed.

2011-09-19
* finished JFFS2 support

2011-09-18
* start on JFFS2 unpacker that uses output from jffs2dump and carves the right
bits from the JFFS2 file. Far from finished, still needs work.

2011-09-17
* add stubs for unpacking of SWF files
* add mapping from extension to language as used in the database

2011-09-10
* if we have ELF files we can do a much better job at getting the strings from
the binary by just looking at a few sections which we can get using readelf.
All other files are still checked using the old 'strings' method.

2011-09-06
* rework splitting \r because it didn't work for various reasons. Also, we are
actually right now just interested in getting rid of \r\n in HTTP code.

2011-09-05
* add unpacking for base64 encoded files. This will not always work, because we
can't determine where a base64 encoded starts or ends.
* split at \r, similar to \n. The 'strings' command will split at either and
so should we to get better matches.
* remove double quotes before putting strings in database in case we are
processing a multiline msgid
* report amount of unique strings for ranking scan

2011-09-04
* add experimental virus scanning method using clamscan, just for Windows
executables
* fix offset for RAR endofarchive variable
* rewrite Zip processing code to new format. For some reason this was not done
yet :-/
* also rewrite RAR processing code to new format. For some reason this was not
done yet :-/

2011-09-02
* fix bugs in extraction code using xgettext
* store line numbers for extracted strings. This might come in handy in future
reporting.

2011-08-29
* ignore strings that will not significantly contribute to a score in the
ranking algorithm. This speeds up the algorithm by vast amounts.

2011-08-27
* add unpacking ar archives, such as Debian packages

2011-08-24
* replace homebrew string extraction code with a call to xgettext. It's
cleaner and gives better results. A small wrapper around it to parse output is
all that was needed.

2011-08-08
* fix InstallShield unpacking
* rewrite ARJ unpacking to new style unpacking

2011-08-07
* unpack .ico files
* start on unpacking InstallShield files. Unfortunately we can only process a
subset of files, because "unshield" can't process all files.

2011-08-02
* add scanning for ISO9660 file systems. Still need to determine the size of
the file system for the blacklist. This functionality needs FUSE and fuseiso.

2011-07-31
* move the RPM unpacking to an external file so BAT will not fail on systems
where there is no RPM Python and where unpacking RPM has been disabled.
* add identifiers for ISO9660

2011-07-26
* add mergeBlacklist method to merge sections in blacklists that overlap.

2011-07-25
* fix copyright statements
* remove more duplicate code from bruteforce.py
* move dynamic library scanning to a separate check
* move architecture scanning to a separate check
* fix cramfs scanning

2011-07-24
* finish ranking method from MSR 2011 paper, except reporting
* remove (some) duplicate code from bruteforce.py

2011-07-17
* don't barf if we can't generate a proper LIST for the batch extraction
program

2011-07-16
* start on reimplementing ranking methods from MSR 2011 paper

2011-07-10
* introduce generic method to create directories with the right names
* rewrite most search* methods to use the prescanned offsets

2011-07-09
* (partial) rewrite to use seek() and read() for searching offsets instead of
first reading the entire file and then find()
* start on generic marker search, so we only have to read a file once, instead
for every 'unpack' scan we want to run

2011-06-19
* ugly byte swapping hack for Realtek RTL8196C based routers

2011-06-03
* start working on crawlers to help maintain archive of source code files that
are needed to create knowledgebases

2011-05-31
* add support for lzo unpacking

2011-05-30
* rework SquashFS code
* add length checking for cramfs for blacklisting

2011-04-28
* partially integrate preliminary support for extracted assemblies for
installers for Microsoft Windows

2011-04-27
* start on extracting XML descriptions from Windows installers so we can make
better guesses as to which program to use to unpack the data

2011-04-03
* add extra ext2 sanity checks to vastly speed up scanning

2011-03-26
* add proper ext2 unpacking
* add unpacking with unsquashfs with LZMA from OpenWrt

2011-03-14
* introduce wrapper for squashfs, so we can easily add other squashfs
unpackers too, plus fix some cleanup bugs for unpackSquashfs

2011-03-13
* add PNG unpacking
* fix tempdirs for ext2 unpacking

2011-03-06
* rework leaf scans to properly use blacklisting
* reenable ext2fs scanning

2011-03-05
* fold walktempdir() into scan()
* remove some clashes between names of variables and built-in function for
clarity

2011-03-04
* rework GIF scanning so we don't unnecessarily loop: merge searchUnpackGIF
and unpackGIF, add extra checks.

2011-03-02
* first copy the file to scan to the temporary scanning directory
* start on reworking hierachical unpacking which will make it easier to find
where and how things were unpacked.
* add more hierarchical unpacking
* unpack squashfs to the temporary directory directly, without having
unsquashfs create the 'squashfs-root' directory
* add speedups for GIF images, also fix a few indexing bugs, argh.

2011-02-28
* add a 'noscan' attribute for directories that don't need extra 'unpack'
scans for its contents
* add 'noscan' for unpacking GIF
* reenable GIF

2011-02-27
* disable GIF scanning due to endless looping. We should start marking certain
files as 'noscan' to avoid looping.
* add giflib-utils as a dependency for the RPM
* rework blacklisting, so we don't overload the datastructure for passing on
the results.
* remove Dutchims
* add yaffs2 unpacking, not enabled by default

2011-02-26
* don't exclude files to scan. The unpack scripts should be able to handle
this nicely.

2011-02-25
* don't clear the blacklist by accident
* start on extracting GIF images
* add extraction of GIF images
* fix another bug in blacklisting

2011-02-23
* fix some bugs in unpacking RAR
* rework scanning for EXE files. Currently only grabs files that can be
unpacked with RAR.
* add unpack7z for use in exe unpacking. Still need to rework generic 7z
unpacking itself.

2011-02-22
* rework unpacking for CAB
* give 7zip more priority than other scans such as CAB to prevent duplicate
scanning
* add blacklisting to 7z. This is very crude and needs to be reworked.

2011-02-21
* add unpacking for ARJ
* fix small bug in ubifs searching

2011-02-20
* fix XZ unpacking
* fix unsquashfs unpacking encountering a sqsh we can't unpack yet

2011-02-18
* change upperbound of blacklist checking from <= to <
* add lzip unpacking

2011-02-16
* add search method for XZ footer
* make lzip a dependency for the RPM
* start on XZ support. This does not yet work, so don't use.
* rework cpio unpacking slightly. There are still a few logic errors here that
need some love.

2011-02-15
* use 'file' to determine the size of squashfs file systems.
* introduce "genericSearch" and rewrite all checks in checks.py to use
genericSearch
* add stubs for XZ support
* small comment fixes and removal from dead code
* add stubs for lzip support

2011-02-13
* only pass data between cpio header and trailer to the cpio unpacker.
* start inlining methods in certain checks that don't have to be separate
* inline more methods, merge a few checks into one file
* add extra checks to cpio unpacking to ensure we are actually unpacking valid
cpio archives.

2011-02-12
* add proper options to license scanning program
* determine sha256 hashes for files scanned by license scanner
* fix cpio searching bug, might break some runs at the moment
* only license check certain files

2011-02-07
* move temporary directory creation into the while loop for
searching/unpacking gzip files to prevent duplicate scanning. This should be
done for other searches as well.
* add stub for adding directories containing the names of the compression to
make it easier to find things after a scan.
* move temporary dir creation into the while loop for most other scans as well

2011-02-06
* implement priorities for scanning, get rid of looping over configuration for
every scan, which was a bit silly.
* remove looping over configuration in XML printing
* small cleanups

2011-02-04
* add documentation for blacklisting
* add blacklisting for individual program scans

2011-02-03
* add blacklisting for tar, cpio and RPM

2011-01-30
* don't scan block devices or character devices
* don't enable ubifs, since I have not added the code yet :-/
* add code to store the configuration globally
* reenable ubifs
* add unpacker for ubifs, currently does not work correctly, but unpacks too
much. This needs to be fixed.
* fix unpacker for ubifs. Needs testing with more real data.
* remove temporary dirs in the bzip2 unpacker
* add stubs for working with priorities, as announced on the mailinglist
* make "config" global, eventually we will replace this with something else
that should significantly clean up the code

2011-01-29
* add -d to cpio, so it actually creates directories
* add unpacking RPMs. RPM contains a gzip file so we get some duplicates.
* actually enable bzip2 in the standard configuration, sigh.

2011-01-27
* add stubs for using Ninka to get licensing information per file

2011-01-26
* return the type of the squashfs file system we find. We don't yet use the
information, but eventually we will use it to choose the right unpacker for
squashfs, and be able to add some more meta information about what kind of
squashfs file system it is.
* update the README, it was still very old (and still can use cleanups)
* add mtd-utils-ubi as a dependency for the RPM (package name needs to be
checked for DEB)

2011-01-25
* cleanups
* add markers for ubifs (used a lot on Android)

2011-01-24
* (finally) add support for bzip2 archives

2011-01-20
* add option to switch between absolute and relative reporting of paths, to
make unpacked files easier to find in /tmp after a scan
* always report both absolute and relative paths, remove switch
* unpack into a single directory, instead of scattering things over lots of
directories in /tmp. This makes it easier to pack the results of a scan for
later analysis.

2011-01-17
* add configuration for BusyBox 1.18.2
* bump version number to 4.0

2011-01-13
* last PyLucene dependencies removed
* rename name2program.py to program2package.py
* add a hack to fix different paths for unsquashfs

2011-01-07
* various cleanups

2011-01-06
* various cleanups

2010-12-28
* make a configuration file for bruteforce.py mandatory
* add configuration, plus default configuration, to bat.busybox.py
* add documentation for generating RPMs

2010-12-22
* add configuration for BusyBox 1.18.1

2010-12-20
* remove dependency on PyLucene, replace with sqlite3

2010-12-15
* add configuration for BusyBox 1.17.4 and 1.18.0

2010-10-19
* bruteforce.py: change help message, since we can scan more than firmwares

2010-10-18
* busybox.py: exit printing an error when we can't find a version number

2010-10-10
* add configuration for BusyBox 1.17.3
* change helptext for BusyBox config extraction script

2010-10-08
* iconv fixes, some extra comments

2010-10-07
* rename unpack types in the bruteforce configuration
* replace per scan specific unpack elements with a generic "unpack" element, add
type of unpack to a new element "type", which specifies the type.
* extractprogramstrings.py: strip comments first, optionally run through
iconv first, make regex more reliable
* add public domain sed script that removes C/C++ style comments

2010-09-15
* store scanned strings to Lucene

2010-09-13
* start on a program to extract strings from sourcecode

2010-09-04
* add configuration for BusyBox 1.17.2

2010-08-18
* add configurations for BusyBox 1.17.0 and 1.17.1
* fix README for appletname-extractor.py

2010-06-17
* add configuration for BusyBox 1.16.2

2010-06-09
* add preliminary support for cramfs (only tested with little endian cramfs).
Some extra work is needed to get this to work (apply a patch, rebuild a tool),
so it is disabled by default for now.

2010-06-08
* compatibility fixes for unzip 6.0

2010-06-03
* reinstate 'magic' attribute in the configuration
* tool to extract information from the XML output and add it to knowledgebase

2010-06-02
* started work on a script to take the results from the output of the
bruteforce tool and put the results into the knowledgebase

2010-06-01
* add a simple check for hostapd
* add some more stubs for integrating the knowledgebase

2010-05-10
* add a simple check for wpa_supplicant
* use data from the knowledgebase to report additional data
* add a script to initialize a knowledgebase (sqlite) , as well as several separate
scripts to maintain the knowledgebase

2010-05-09
* add a script for creating a knowledgebase and fill it with some test data

2010-05-05
* add simple checks for iptables, iproute, dproxy, ez-ipupdate
* add simple check for libusb 0.1
* add simple check for vsftpd
* move documentation to the 'doc' directory
* document adding new checks

2010-05-04
* small speedup for BusyBox (40 characters should be enough for the BusyBox
version number)
* stub for XML reporting for BusyBox, not yet used
* cleanup fsmagic.py, add markers for cpio archives
* add beginnings of tools to build and query a searchbase with a file name to
package mapping, useful for quick sweep scanning
* make the tool run silent by default (no reporting)
* add reporting of bruteforce scanning in XML (enable with -x flag)
* remove old text reporting
* add infrastructure to have custom XML snippets printed for checks that don't
fit the default XML reporting model
* add unpack code for cpio, tar, Windows executables (cabinet archive files,
7z), rar, zip
* add code to determine architecture for ELF files
* document code more

2010-05-01
* remove some calls to addDocument() in the extractkernel* scripts, since they
are unnecessary. It also brings down the size of the Lucene indexes with about
a quarter, and lets the scripts run a bit faster.

2010-04-30
* remove a marker string for U-Boot which falsely identified some instances of
CFE as possibly U-Boot

2010-04-27
* add a check for loadlin, which you can still find in some embedded devices
* speedup for BusyBox version extraction
* speedup for Linux kernel version extraction

2010-04-26
* close files when we don't need them anymore. This prevents running out of
limits for open files.

2010-04-23
* add more documentation for the bruteforce scanning tool

2010-04-21
* add first scan for U-Boot. More marker strings need to be added to make it more reliable.

2010-04-18
* remove wrong marker line for ALSA, leading to false positives
* add LZMA decompression. This is not too reliable according to Debian bug #364260

2010-04-17
* add basic pretty printing
* speedup scanning for BusyBox version number
* Python 2.5 compatibility fixes (thanks to Brett Smith)
* only check for module license strings in actual modules
* return the correct offset for finding squashfs file systems
* filter out more files, that are not immediately interesting, like HTML pages
* add the kernel checks from the kernelanalysis script to the brute force scanner

2010-04-16
* add scan for RedBoot to brute force scanning tool
* add scan for wireless tools to brute force scanning tool
* add scan for dynamically linked libraries to brute force scanning tool
* add scan for licenses in kernel modules to brute force scanning tool

2010-04-15 - initial release
