TODO:

file systems:
* FAT16 (use python-construct)
* FAT32
* MBR (use python-construct)
* NTFS
* ubifs (unubi was removed from mtd-utils)
* more generic YAFFS2 support
* squashfs as described at http://www.devttys0.com/2011/08/extracting-non-standard-squashfs-images/

compression:
* rzip
* E00
* 7z only works if a whole file is compressed with 7z. Rework and test with D-Link firmware DSL-524T_FW_V3.00B01T02.UK-A.20060621.zip
* better support for ZIP file comments http://www.pkware.com/documents/casestudies/APPNOTE.TXT

queueing system:
* let top level script also read from a queue
* add script to add files to and remove files from scanning queue

aggregate scanning:
* cleanup if we used one of the squashfs + lzma variants where we can't determine the size (is this still necessary?)
* check if Linux kernel modules and version of Linux kernel(s) (if any) in a firmware match

GUI:
* rewrite to PyQt or PySide to take advantage of better rendering engine (webkit)

error handling:
* better handle errors to give users a better indication if something went wrong

function names:
* generate list of function names and where they were found, optionally with line numbers, for GUI

database creation:
* rename batchextractprogramstrings.py
* replace excessive parameter list of batchextractprogramstrings.py with a configuration file
* handle embedded archives (ZIP files, tarballs, etc.)
* handle patches (both normal and unified)
* import licensing information from SPDX files
* rewrite ctags and xgettext invocations to scan multiple files at once to reduce overhead of calling ctags and xgettext
* create index for sha256 for processed
* update to FOSSology 2.1.1

ranking:
* use version information to report most likely licenses
* deal with inner classes properly
* use clonedb information for variable names, field names, and so on
* use information from special ELF sections from Linux kernels that are distributed as ELF files, such as Fedora's kernels, or Linux kernel modules: __ksymtab + friends and .symtab

busybox scanning:
* clean up finding ranges of applets in extract_configuration. It should be possible to do this less kludgy.

HTML generation:
* finish function name reporting
* clean up/rewrite/make it easier to use
* add license information if available

misc:
* replay script to unpack firmware based on only the pickle with unpacking data. After this set the default of outputlite to 'yes'
* add support for ignoring some file types/extensions completely
* add configuration option to set temporary directory prefix for all scans
* check whether or not squashfs 4.2 support is necessary. Fedora seems to have bumped to 4.2 and uses all available compressions. If it is needed add patches for CVE-2012-4024 for unsquashfs42.
* add piecharts/reports per directory that summarise what is inside a directory (recursively, perhaps only if something was unpacked)
* add reporting for duplicate files that uses results from findduplicates.py
* add per scan debug to allow better custom debugging
* test on latest OpenSUSE
* test on latest Ubuntu, make sure configurations/dependencies work

BOTTLENECKS:
1. ELF tagging is sometimes incorrect, so LZMA unpacker tries to extract LZMA files in vain from these ELF files, which costs a lot of time.
2. preread (in parallel) leafreports of Java .class files which are shared between several JAR files for aggregate jars. This saves opening and reading the same files.
3. check odex files and tag them as dalvik
4. check whether or not LZMA checking can be made more efficient: sometimes LZMA checking eats more than 50%(!) of total scanning time
5. remove version information for unlikely versions from result pickles, given a few preconditions. The result pickles can grow very large, for example when scanning a Linux kernel image.
